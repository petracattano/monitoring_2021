# 1. R_code_remote_sensing.r

# 2. R_code_time_series.r

# 3. R_code_copernicus.r

# 4. R_code_knit.r

# 5. 














# 1. R_code_remote_sensing.r

# Il mio primo codice per il Telerilevamento
# funzione per installazione pacchetti 
# scrivo le virgolette perchè sto uscendo da R
install.packages("raster") #pacchetto raster

# Funzione library per richiamare il pacchetto raster 
# scrivi sempre all'inizio del codice le librerie necessarie
library(raster)

# settaggio della working directory, cartella da cui estrarre i dati
setwd("C:/lab/") 

# Funzione brick per importare i dati
#immagine Amazzonia
p224r63_2011 <- brick("p224r63_2011_masked.grd") #virgolette perchè sto uscendo da R

# Funzione per avere le informazioni sul file (numero di pixel, sistema di riferimento...) scrivo il nome dell'immagine
p224r63_2011

# Funzione plot per visualizzare le varie bande
plot(p224r63_2011) #colorazione di default

# funzione per cambiare colore
# scrivo la c davanti la parentesi perchè si tratta di elementi dello stesso tipo che sto raggruppando in un vettore, rappresentano lo stesso argomento (il colore)
cl <- colorRampPalette(c("black","grey","light grey")) (100) #ultimo argomento indica quanti livelli di ciascun colore voglio visualizzare

# Plot con la nuova color palette tramite l'argomento col
plot(p224r63_2011, col=cl)

# Per cambiare colore --> nuovo
cl <- colorRampPalette(c("blue","pink","light green","yellow","red")) (100)

# Plot con la nuova color palette
plot(p224r63_2011, col=cl)

#Bande di Landsat
# B1: blu
# B2: verde
# B3: rosso
# B4: infrarosso vicino
# B5: infrarosso medio
# B6: infrarosso termico (lontano)
# B7: infrarosso medio

#per chiudere il plot uso la funzione dev.off
dev.off()

# plotto l'immagine legata alla banda 1, il $ (una corda) mi permette di legare al plot lo strato da visualizzare
plot(p224r63_2011$B1_sre)

# cambio colore
cl <- colorRampPalette(c("red","yellow","light green","pink","blue")) (200)

# Plot con la nuova color palette in B1
 plot(p224r63_2011$B1_sre, col=cl) 

# ripulisci la parte grafica
dev.off()

# plotto B1 e B2 insieme
# funzione par per stabilire come fare il plottaggio, mi permette di creare un sistema di righe e colonne in cui impostare un multiframe
par(mfrow=c(1,2)) # avrò 1 riga e 2 colonne. Se con il primo numero vuoi indicare le colonne e non le righe --> par(mfcol=c(2,1)).
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)

# se voglio 2 righe e 1 colonna
par(mfrow=c(2,1))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)

# 4 righe e 1 colonna con le quattro bande
par(mfrow=c(4,1))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)
plot(p224r63_2011$B3_sre)
plot(p224r63_2011$B4_sre)

# disponi le immagini in modo che si distribuiscano 2x2
par(mfrow=c(2,2))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)
plot(p224r63_2011$B3_sre)
plot(p224r63_2011$B4_sre)

# Posso plottare le singole bande in un multiframe differenziandole nel colore
par(mfrow=c(2,2))

clb <- colorRampPalette(c("dark blue","blue","light blue")) (100)
plot(p224r63_2011$B1_sre, col=clb) # banda blu

clg <- colorRampPalette(c("dark green","green","light green")) (100)
plot(p224r63_2011$B2_sre, col=clg) # banda verde

clr <- colorRampPalette(c("dark red","red","pink")) (100)
plot(p224r63_2011$B3_sre, col=clr) # banda rosso

clnir <- colorRampPalette(c("yellow","orange","green")) (100)
plot(p224r63_2011$B4_sre, col=clnir) # banda infrarosso vicino


# DAY 4 
#funzione plotRGB per visualizzare l'immagine con colori naturali, sistema RGB (red, green, blue sono i colori fondamentali)
# monto le tre bande una sull’altra secondo un ordine che decido io (max. 3 bande)
#l'argomento stretch per evitare che ci siano uno schiacciamento verso una sola parte del colore
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin") #banda 3 del rosso nella componente red, banda 2 del verde nella componente green, banda 1 del blue nella componente blu

#la natura vede in infrarosso
# se voglio vedere anche l'infrarosso vicino (altissima riflettanza nelle piante, in questo caso sarà visibile in rosso perchè monto la banda 4 nella componente red)
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin") #banda 4 sulla componente red, banda 3 sulla componente green, banda 2 sulla componente blue

# monto la banda 4 dell'infrarosso vicino sul verde (altissima riflettanza nelle piante, in questo caso sarà visibile in verde perchè monto la banda 4 nella componente red)
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin") #banda 3 sulla componente red, banda 4 sulla componente green, banda 2 sulla componente blue

# monto la banda 4 dell'infrarosso vicino sul blue (altissima riflettanza nelle piante, in questo caso sarà visibile in blu perchè monto la banda 4 nella componente blue)
plotRGB(p224r63_2011, r=3, g=2, b=4, stretch="Lin")

# confronto i 4 plot tramite la funzione par creando un multiframe 2x2 
par(mfrow=c(2,2))
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=2, b=4, stretch="Lin")

# posso salvare i plot in PDF tramite la funzione pdf con questa sequenza di funzioni
pdf("ll_mio_primo_pdf_con_R.pdf") #uso le virgolette perchè sto uscendo da R
par(mfrow=c(2,2))
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=2, b=4, stretch="Lin")
dev.off()

# oltre a quello lineare, posso utilizzare lo stretch histagram, più aggressivo, mi permette di visualizzare + dettagli
# le zone in violetto nella foresta probabilmente sono le più umide, presenza di acqua
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="hist")

# par per immagine a colori naturali, immagine con infrarosso sul green, immagine con infrarosso sul green e his stretch. a 3 righe e 1 colonna.
par(mfrow=c(3,1))
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin") #RGB
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin") #infrarosso sulla componente green con stretch lineare
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="hist") #infrarosso sulla componente green con stretch histogram 

# DAY 5
# importo sia l'immagine del 1988 che quella del 2011 per creare un multitemporal set e confrontare le due situazioni
p224r63_2011 <- brick("p224r63_2011_masked.grd") # funzione brick per importare i dati
p224r63_1988 <- brick("p224r63_1988_masked.grd") 
p224r63_1988  #per avere le informazioni sui file
p224r63_2011

# Plot per visualizzare tutte le bande della immagine del 1988
plot(p224r63_1988)

# Plot RGB colori naturali
plotRGB(p224r63_1988, r=3, g=2, b=1, stretch="Lin") #RGB
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="Lin") #vedo anche l'infrarosso vicino sulla componente red

# funzione par per creare un multiframe RGB e confrontare le due situazioni
par(mfrow=c(2,1))
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")

#Voglio un multiframe 2x2 per visualizzare sia lo tretch lineare che histogram
par(mfrow=c(2,2))
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="hist")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="hist")

# salvo in pdf
pdf("multitemp.pdf")
par(mfrow=c(2,2))
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="hist")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="hist")
dev.off()


# 2. R_code_time_series.r

# Time series analysis
# Greenland increase of temperature
# Data and code from Emnuela Cosma

#installo il pacchetto rasterVis e lo richiamo insieme al pacchetto raster
install.packages("rasterVis") #per la funzione levelplot
library(raster)
library(rasterVis)

# setto la working directory
setwd("C:/lab/greenland")

# importo il primo dataset con la funzione raster 
# uso la funzione brick quando ho pacchetti di dati raster, in questo caso ho + di 1 file a strati, 4 strati separati
# ogni strato rappresenta la stima della temperatura LST (e non la riflettanza) che deriva da dati copernicus
lst_2000 <- raster("lst_2000.tif") #uso le virgolette perchè sto uscendo da R

# funzione per plottaggio
# la scala graduata nell’immagine sono valori di bit che si riferiscono ai gradi
#il sensore di temperatura misura la riflettanza nell'infrarosso termico e successivamente converte 
plot(lst_2000) 

# importo anche il dato del 2005
lst_2005 <- raster("lst_2005.tif")

# funzione per plottaggio
plot(lst_2005)

# importo anche le altre immagini
lst_2010 <- raster("lst_2010.tif")
lst_2015 <- raster("lst_2015.tif")

#crea un multipannel 2x2 con la funzione par per confrontare le 4 immagini
par(mfrow=c(2,2))
plot(lst_2000)
plot(lst_2005)
plot(lst_2010)
plot(lst_2015)

# la funzione lapply permette di applicare funzioni (es. raster e quindi importazione dati) a liste di file
# per farlo devo prima creare una lista di file tramite la funzione list.files
rlist <- list.files(pattern="lst") #il pattern è un aspetto condiviso da tutti i file interessati che permette il raggruppamento
rlist

# posso applicare la funzione lapply alla lista di file creati
#tramite la funzione raster importo tutti i file della lista in un unico passaggio
import <- lapply(rlist,raster)
import

# ho importato i 4 file separati, posso creare un pacchetto e raggrupparli -> fare uno stack
# la funzione stack mi permette di gestire i file insieme, ho creato una immagine con tante bande

TGr <- stack(import)

#per avere le info sul file
TGr

#lo stack mi permette di plottare direttamente senza importare il multiframe tramite la funzione par
plot(TGr)

#faccio un plot RGB in cui sovrappongo tre immagini, lst 2000, 2005 e 2010. C'è più blu, ho valori più alti nell'lst 2010
# puoi anche specificare le componenti: plotRGB(TGr, r=1, g=2, b=3, stretch="Lin")
plotRGB(TGr, 1, 2, 3, stretch="Lin") 
# file 1 2000 nel livello del red
# file 2 2005 nel livello del green
#file 3 2010 nel livello del blue

#posso montare le immagini in modi differenti.
plotRGB(TGr, 2, 3, 4, stretch="Lin") #2005 nel red, 2010 nel green, 2015 nel blue
plotRGB(TGr, 4, 3, 2, stretch="Lin") #2015 nel red, 2010 nel green, 2005 nel blue



# il pacchetto rasterVis fornisce metodi di visualizzazione raster più potenti tramite la funzione levelplot (+ compatto, chiaro, informativo)
levelplot(TGr) #in questo caso sto plottando tutti i livelli dello stack

# posso applicare la funzione levelplot ad un singolo livello attraverso il legame con $
levelplot(TGr$lst_2000) #$ + nome dello strato mi permette la singola visualizzazione
levelplot(TGr$lst_2005)

# cambio i colori del plot
cl <- colorRampPalette(c("blue","light blue","pink","red"))(100)
levelplot(TGr, col.regions=cl) # L'argomento stavolta non è col ma col.regions

# posso rinominare i titoli del singoli attributi per rendere ancora più chiara e informativo il grafico tramite l'argomento names.attr
levelplot(TGr,col.regions=cl, names.attr=c("July 2000","July 2005", "July 2010", "July 2015")) #c + parentesi perchè creo un vettore, le virgolette perchè sono testi

# inserisco il titolo principale con l'argomento main 
levelplot(TGr,col.regions=cl, main="LST variation in time", names.attr=c("July 2000","July 2005", "July 2010", "July 2015"))

# creo un pdf del grafico finale
pdf("LST variation in time.pdf")
cl <- colorRampPalette(c("blue","light blue","pink","red"))(100)
levelplot(TGr,col.regions=cl, main="LST variation in time",
names.attr=c("July 2000","July 2005", "July 2010", "July 2015"))
dev.off()

# scarichiamo i dati melt sulo scioglimento dal 79 al 2007
# abbiamo tantissimi dati, per importarli creiamo una lista e sfruttiamo la funzione lapply per applicare la funzione raster
# creo la lista tramite la funzione list.files
meltlist <- list.files(pattern="melt") #melt è la parola comune a tutti i file

# funzione lapply per applicare funzione raster su tutta la lista
melt_import <- lapply(meltlist,raster)
import

# faccio lo stack per raggrupare tutti i files importati, lo chiamo melt
melt <- stack(melt_import)
melt

# plotto tramite la funzione levelplot
levelplot(melt)

# possiamo fare algebra applicata a matrici per vedere la differenza tra due dati e capire il grado di scioglimento
# facciamo la sottrazione tra il primo e l'ultimo dato e associamo ad un oggetto (melt_amount)
melt_amount <- melt$X2007annual_melt - melt$X1979annual_melt # + è alto il valore, + scioglimento c'è stato

# cambio il colore e faccio un plot
clb <- colorRampPalette(c("blue","white","red"))(100)
plot(melt_amount, col=clb)

# faccio un level plot per avere un grafico ancora più informativo
levelplot(melt_amount, col.regions=clb)



# 3. R_code_copernicus.r

# visualizing Copernicus data
# installo la libreria per legger in ncdf, formato di dati copernicus .nc
install.packages("ncdf4") #virgolette perchè esco da R

# richiamo il pacchetto insieme a quello raster, senza le virgolette perchè li ho già installati
library(raster)
library(ncdf4)

# imposto la working directory dove ho i dati
setwd("C:/lab/")

# a questo punto devo dare un nome al mio dataset. Copia e incolla il nome del dataset lasciando l'estensione
# uso la funzione raster perchè è un singolo strato, virgolette perchè usciamo da R
fcover <- raster ("c_gls_FCOVER_202006130000_GLOBE_PROBAV_V1.5.1.nc") #FCOVER: riguarda l'estensione spaziale della vegetazione (componente sana)
fcover # per avere info sul file

# scelgo una colorandpalette, ho un singolo strato e non posso montare più bande nel sistema RGB
cl <- colorRampPalette(c('light blue','green','red','yellow'))(100)
plot(fcover, col=cl)

# funzione aggregate per ricampionare (è un resampling) il dataset e diminuirne la risoluzione
# permette di aggregare, attraverso la loro media, un tot di pixel in  pixel + grandi
fcoverres<-aggregate(fcover, fact=100) #argomento fact indica di quanto diminuire linearmente. In questo caso in uno spazio 100x100 pixel ne avrò solo 1. 

#plottaggio del dato ricampionato
plot(fcoverres, col=cl)


# 4. R_code_knitr.r

# codice per creare template finali, report di codici
# set della working directory 
setwd("C:/lab/")

# installo il pacchetto knitr, mi permette di creare dei report finali delle operazioni su R
install.packages("knitr")

# richiamo il pacchetto knitr
library(knitr)

# salva il codice di cui vuoi il report sul pc tramite qualsiasi gestore di testo (anche word)
# funzione stitch per applicare il pacchetto knitr al codice di cui voglio il report
# nel primo argomento specifica l'estensione se hai problemi durante il caricamento (quì è .tex)
stitch("R_code_greenland.r.tex", template=system.file("misc","knitr-template.Rnw", package="knitr"))


# 5. 






